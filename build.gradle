buildscript {
    ext {
        versionGradle = "6.8.3"
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.netflix.nebula:nebula-release-plugin:8.0.3"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.36.0"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
    }
}

apply plugin: "io.codearte.nexus-staging"

nexusStaging {
    packageGroup = "one.leftshift"
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    stagingProfileId = System.getenv("OSSRH_STAGING_PROFILE_ID")
    username = System.getenv("OSSRH_LOGIN_NAME")
    password = System.getenv("OSSRH_LOGIN_PASSWORD")
}

allprojects {
    apply plugin: "nebula.nebula-release"
    apply plugin: "com.github.ben-manes.versions"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "org.sonarqube"

    release {
        defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
    }
}

subprojects {
    apply plugin: "groovy"
    apply plugin: "maven-publish"
    apply plugin: "org.sonarqube"

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        implementation(gradleApi())

        testImplementation(gradleTestKit())
        testImplementation("org.codehaus.groovy:groovy-all:2.5.8")
        testImplementation("org.spockframework:spock-core:1.2-groovy-2.5")
    }

    test {
        maxHeapSize = "1024m"
        beforeTest { descriptor ->
            logger.lifecycle(descriptor.toString())
        }
        if (project.hasProperty("continueOnFailure")) {
            boolean isContinueOnFailure = project.property("continueOnFailure")
            ignoreFailures isContinueOnFailure
        }
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier "javadoc"
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }
    artifacts {
        archives javadocJar, sourcesJar
    }

    publishing {
        publications {
            release(MavenPublication) {
                artifactId = project.name
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom.withXml {
                    Node root = asNode()
                    root.appendNode("name", "Asteria")
                    root.appendNode("description", "Asteria Gradle Plugins")
                    root.appendNode("url", "https://github.com/leftshiftone/asteria")

                    Node licenses = root.appendNode("licenses")
                    Node license = licenses.appendNode("license")
                    license.appendNode("name", "The Apache License, Version 2.0")
                    license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

                    Node developers = root.appendNode("developers")
                    Node developer = developers.appendNode("developer")
                    developer.appendNode("id", "leftshiftone")
                    developer.appendNode("name", "Leftshift One")
                    developer.appendNode("email", "contact@leftshift.one")
                    developer.appendNode("organization", "Leftshift One Software GmbH")
                    developer.appendNode("organizationUrl", "https://www.leftshift.one")

                    Node scm = root.appendNode("scm")
                    scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/asteria.git")
                    scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/asteria.git")
                    scm.appendNode("url", "https://github.com/leftshiftone/asteria")
                }
            }
        }
        repositories {
            maven {
                name = "sonatype"
                url = version.toString().endsWith("SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username System.getenv("OSSRH_LOGIN_NAME")
                    password System.getenv("OSSRH_LOGIN_PASSWORD")
                }
            }
        }
    }
    ext."signing.keyId" = System.getenv("OSSRH_SIGN_KEY_ID")
    ext."signing.password" = System.getenv("OSSRH_SIGN_KEY_PASSWORD")
    ext."signing.secretKeyRingFile" = System.getenv("OSSRH_SIGN_KEY_PATH")
    signing {
        sign publishing.publications
    }

}

ext."signing.keyId" = System.getenv("OSSRH_SIGN_KEY_ID")
ext."signing.password" = System.getenv("OSSRH_SIGN_KEY_PASSWORD")
ext."signing.secretKeyRingFile" = System.getenv("OSSRH_SIGN_KEY_PATH")
signing {
    sign publishing.publications
}
