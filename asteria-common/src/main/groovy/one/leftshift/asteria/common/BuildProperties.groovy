package one.leftshift.asteria.common


import one.leftshift.asteria.util.Assert
import org.gradle.api.Project

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.format.DateTimeParseException

import static one.leftshift.asteria.common.date.AsteriaDateFormat.ASTERIA_DEFAULT

/**
 * Represents a build.properties file generated by asteria-version
 * @since 1.0.0
 */
class BuildProperties {

    private static enum Default {
        VERSION_KEY("version"),
        REVISION_KEY("revision"),
        TIMESTAMP_KEY("timestamp"),
        DEFAULT_VERSION("latest"),

        final String strValue

        Default(String strValue) {
            this.strValue = strValue
        }
    }

    final String version
    final String revision
    final ZonedDateTime timestamp


    private BuildProperties(String version, String revision, ZonedDateTime timestamp) {
        this.version = version
        this.revision = revision
        this.timestamp = timestamp
    }

    /**
     * Assembles this from {@link Properties}
     * @param properties
     * @return
     */
    static BuildProperties from(Properties properties) {
        Assert.notNull(properties, "properties can not be null")
        return new BuildProperties(
                properties.get(Default.VERSION_KEY.strValue) as String,
                properties.get(Default.REVISION_KEY.strValue) as String,
                parse(properties.get(Default.TIMESTAMP_KEY.strValue) as String))
    }

    /**
     * Assembles this from {@link Project}
     * @param project
     * @return
     */
    static BuildProperties from(Project project) {
        Assert.notNull(project, "project can not be null")
        return new BuildProperties(project.version as String, null, ZonedDateTime.now())
    }

    static BuildProperties from(String version, String revision, ZonedDateTime timestamp) {
        return new BuildProperties(version, revision, timestamp)
    }

    private static ZonedDateTime parse(String datetime) {
        if (datetime == null) {
            return ZonedDateTime.now()
        }
        try {
            return ZonedDateTime.parse(datetime, DateTimeFormatter.ofPattern(ASTERIA_DEFAULT.pattern))
        } catch (DateTimeParseException ignored) {
            return ZonedDateTime.now()
        }
    }
}
